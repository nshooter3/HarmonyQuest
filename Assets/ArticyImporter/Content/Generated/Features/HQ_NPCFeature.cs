//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Articy.Harmonybarktest;
using Articy.Unity;
using Articy.Unity.Interfaces;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;


namespace Articy.Harmonybarktest.Features
{
    
    
    [Serializable()]
    public class HQ_NPCFeature : IArticyBaseObject, IPropertyProvider
    {
        
        [SerializeField()]
        private String mTeaseText;
        
        [SerializeField()]
        private DialogueType mDialogueType = new DialogueType();
        
        [SerializeField()]
        private UInt64 mOwnerId;
        
        [SerializeField()]
        private UInt32 mOwnerInstanceId;
        
        public String Unresolved_TeaseText
        {
            get
            {
                return mTeaseText;
            }
        }
        
        public String TeaseText
        {
            get
            {
                return Articy.Unity.ArticyTextExtension.Resolve(this, mTeaseText);
            }
            set
            {
                var oldValue = mTeaseText;
                mTeaseText = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "HQ_NPC.TeaseText", oldValue, mTeaseText);
            }
        }
        
        /// <summary>
        /// This is controls the color and emblem dispalyed for this dialogue.
        /// </summary>
        public DialogueType DialogueType
        {
            get
            {
                return mDialogueType;
            }
            set
            {
                var oldValue = mDialogueType;
                mDialogueType = value;
                Articy.Unity.ArticyDatabase.ObjectNotifications.ReportChanged(OwnerId, OwnerInstanceId, "HQ_NPC.DialogueType", oldValue, mDialogueType);
            }
        }
        
        public UInt64 OwnerId
        {
            get
            {
                return mOwnerId;
            }
            set
            {
                mOwnerId = value;
            }
        }
        
        public UInt32 OwnerInstanceId
        {
            get
            {
                return mOwnerInstanceId;
            }
            set
            {
                mOwnerInstanceId = value;
            }
        }
        
        private void CloneProperties(object aClone, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Harmonybarktest.Features.HQ_NPCFeature newClone = ((Articy.Harmonybarktest.Features.HQ_NPCFeature)(aClone));
            newClone.TeaseText = Unresolved_TeaseText;
            newClone.DialogueType = DialogueType;
            newClone.OwnerId = OwnerId;
        }
        
        public object CloneObject(object aParent, Articy.Unity.ArticyObject aFirstClassParent)
        {
            Articy.Harmonybarktest.Features.HQ_NPCFeature clone = new Articy.Harmonybarktest.Features.HQ_NPCFeature();
            CloneProperties(clone, aFirstClassParent);
            return clone;
        }
        
        public virtual bool IsLocalizedPropertyOverwritten(string aProperty)
        {
            return false;
        }
        
        #region property provider interface
        public void setProp(string aProperty, object aValue)
        {
            if ((aProperty == "TeaseText"))
            {
                TeaseText = System.Convert.ToString(aValue);
                return;
            }
            if ((aProperty == "DialogueType"))
            {
                DialogueType = ((DialogueType)(aValue));
                return;
            }
        }
        
        public Articy.Unity.Interfaces.ScriptDataProxy getProp(string aProperty)
        {
            if ((aProperty == "TeaseText"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(TeaseText);
            }
            if ((aProperty == "DialogueType"))
            {
                return new Articy.Unity.Interfaces.ScriptDataProxy(DialogueType);
            }
            return null;
        }
        #endregion
    }
}
